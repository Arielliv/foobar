# found solution on the internet

BITS_PER_INT = 32  # Replace with a meaningful constant name

def answer(matrix):
    def toggle_gen(n, mat):
        ret = [[0] * (n * n + 1) for _ in range(n * n)]
        for i in range(n * n):
            row = [0] * (n * n + 1)
            for j in range(n * n + 1):
                if j == n * n:
                    row[j] = mat[i // n][i % n]
                elif i // n == j // n or i % n == j % n:
                    row[j] = 1
                else:
                    row[j] = 0
            ret[i] = row
        return ret

    def row_reduce_echelon_form(mat):
        rref = [row[:] for row in mat]
        start_row = 0

        for c in range(len(rref[0])):
            pivot_row = next((r for r in range(start_row, len(rref)) if rref[r][c] == 1), -1)
            if pivot_row == -1:
                continue

            if pivot_row != start_row:
                rref[pivot_row], rref[start_row] = rref[start_row], rref[pivot_row]

            for r in range(len(rref)):
                if r == start_row:
                    continue
                if rref[r][c] == 1:
                    rref[r] = [a ^ b for a, b in zip(rref[r], rref[start_row])]

            start_row += 1

        return rref

    def basis_weighter(kernel, weights, sol, res):
        changes = weights ^ (weights - 1)
        i = 0

        while changes >> i > 0:
            if (changes >> i) & 1 == 1:
                res = [r ^ k for r, k in zip(res, kernel[i])]

            i += 1

        weight = sum(bin(r ^ s).count('1') for r, s in zip(res, sol))
        return weight

    def number_of_set_bits(i):
        i = i - ((i >> 1) & 0x55555555)
        i = (i & 0x33333333) + ((i >> 2) & 0x33333333)
        return (((i + (i >> 4)) & 0x0F0F0F0F) * 0x01010101) >> 24

    tm = toggle_gen(len(matrix), matrix)
    mat = row_reduce_echelon_form(tm)

    zero_row = len(mat)
    for i in range(len(mat) - 1, -1, -1):
        status = any(mat[i][j] == 1 for j in range(len(mat[0]) - 1))
        if status:
            zero_row = i + 1
            break
        elif mat[i][len(mat[0]) - 1] == 0:
            continue
        else:
            return -1

    offset = 0
    change_check = 0
    zero_row_copy = zero_row
    for r in range(zero_row_copy):
        if mat[r][r + offset] == 1:
            continue
        else:
            change_check = 1
            mat[zero_row + r][r + offset] = 1
            offset += 1

    if change_check == 1:
        mat = row_reduce_echelon_form(mat)

    len_sol = len(mat) // BITS_PER_INT + 1 if len(mat) % BITS_PER_INT != 0 else len(mat) // BITS_PER_INT
    sol = [0] * len_sol
    weight = 0

    for i in range(len(mat)):
        val = mat[i][len(mat[0]) - 1]
        sol[i // BITS_PER_INT] = (sol[i // BITS_PER_INT] << 1) | val
        weight += val

    if len(matrix) % 2 == 0:
        return weight

    kernels = {
        3: returnn3,
        5: returnn5,
        7: returnn7,
        9: returnn9,
        11: returnn11,
        13: returnn13,
        15: returnn15,
    }

    kernel = kernels.get(len(matrix), returnn3)
    max_val = 1 << (2 * (len(matrix) - 1))

    min_weight = weight
    res = [0] * len(sol)

    for i in range(1, max_val):
        hamming = basis_weighter(kernel(), i, sol, res)
        if hamming < min_weight:
            min_weight = hamming

    return min_weight


def returnn3():
    return [[284], [149], [78], [63]]


def returnn5():
    return [[17284592], [8659223], [4329627], [2164829], [1082430], [1015839], [31775], [1023]]


def returnn7():
    return [
        [-2130838537, 122816], [1082196484, 4191], [541098242, 2159], [270549121, 1143],
        [135274560, 66171], [67637280, 33149], [33818640, 16638], [33292288, 127],
        [260096, 127], [2032, 127], [15, 114815], [0, 16383]
    ]


def returnn9():
    return [
        [-2143297553, -134480386, 130816], [1075843080, 67240192, 65919],
        [537921540, 33620096, 33215], [268960770, 16810048, 16863], [134480385, 8405024, 8687],
        [67240192, -2143281136, 4599], [33620096, 1075843080, 2555], [16810048, 537921540, 1533],
        [8405024, 268960770, 1022], [8372224, 0, 511], [16352, 0, 511], [31, -268435456, 511],
        [0, 267911168, 511], [0, 523264, 511], [0, 1022, 511], [0, 1, 131071]
    ]


def returnn11():
    return [
        [-2146435585, -1074266369, -537133185, 31456256], [1074266368, 537133184, 268566592, 1050111],
        [537133184, 268566592, 134283296, 526079], [268566592, 134283296, 67141648, 264063],
        [134283296, 67141648, 33570824, 133055], [67141648, 33570824, 16785412, 67551],
        [33570824, 16785412, 8392706, 34799], [16785412, 8392706, 4196353, 18423],
        [8392706, 4196353, 2098176, 16787451], [4196353, 2098176, -2146434560, 8394749],
        [2098176, -2146434560, 1074266368, 4198398], [2096128, 0, 0, 2047], [1023, -2147483648, 0, 2047],
        [0, 2146435072, 0, 2047], [0, 1048064, 0, 2047], [0, 511, -1073741824, 2047],
        [0, 0, 1073217536, 2047], [0, 0, 524032, 2047], [0, 0, 255, 29362175], [0, 0, 0, 4194303]
    ]


def returnn13():
    return [
        [-2147221537, -16779265, -1073872913, -8389633, -536936456, 0],
        [1073872912, 8389632, 536936456, 4194816, 268468235, 511],
        [536936456, 4194816, 268468228, 2097408, 134234125, 511],
        [268468228, 2097408, 134234114, 1048704, 67117070, 511],
        [134234114, 1048704, 67117057, 524352, 33558543, 255],
        [67117057, 524352, 33558528, -2147221472, 16779279, 383],
        [33558528, -2147221472, 16779264, 1073872912, 8389647, 447],
        [16779264, 1073872912, 8389632, 536936456, 4194831, 479],
        [8389632, 536936456, 4194816, 268468228, 2097423, 495],
        [4194816, 268468228, 2097408, 134234114, 1048719, 503],
        [2097408, 134234114, 1048704, 67117057, 524367, 507],
        [1048704, 67117057, 524352, 33558528, -2147221457, 509],
        [524352, 33558528, -2147221472, 16779264, 1073872927, 510],
        [524224, 0, 0, 0, 15, 511],
        [63, -33554432, 0, 0, 15, 511],
        [0, 33550336, 0, 0, 15, 511],
        [0, 4095, -2147483648, 0, 15, 511],
        [0, 0, 2147221504, 0, 15, 511],
        [0, 0, 262112, 0, 15, 511],
        [0, 0, 31, -16777216, 15, 511],
        [0, 0, 0, 16775168, 15, 511],
        [0, 0, 0, 2047, -1073741809, 511],
        [0, 0, 0, 0, 1073610767, 511],
        [0, 0, 0, 0, 131071, 511]
    ]



def returnn15():
    return [
        [-2147418115, -262153, -1048609, -4194433, -16777729, -67110913, -268443648, 0],
        [1073774593, 131076, 524304, 2097216, 8388864, 33555456, 134230015, 1],
        [536887296, -2147418110, 262152, 1048608, 4194432, 16777728, 67123199, 1],
        [268443648, 1073774593, 131076, 524304, 2097216, 8388864, 33569791, 1],
        [134221824, 536887296, -2147418110, 262152, 1048608, 4194432, 16793087, 1],
        [67110912, 268443648, 1073774593, 131076, 524304, 2097216, 8404735, 1],
        [33555456, 134221824, 536887296, -2147418110, 262152, 1048608, 4210559, 1],
        [16777728, 67110912, 268443648, 1073774593, 131076, 524304, 2113471, 1],
        [8388864, 33555456, 134221824, 536887296, -2147418110, 262152, 1064927, 1],
        [4194432, 16777728, 67110912, 268443648, 1073774593, 131076, 540655, 1],
        [2097216, 8388864, 33555456, 134221824, 536887296, -2147418110, 278519, 1],
        [1048608, 4194432, 16777728, 67110912, 268443648, 1073774593, 147451, 1],
        [524304, 2097216, 8388864, 33555456, 134221824, 536887296, -2147401731, 1],
        [262152, 1048608, 4194432, 16777728, 67110912, 268443648, 1073790974, 1],
        [131076, 524304, 2097216, 8388864, 33555456, 134221824, 536903679, 0],
        [131068, 0, 0, 0, 0, 0, 16383, 1],
        [3, -524288, 0, 0, 0, 0, 16383, 1],
        [0, 524272, 0, 0, 0, 0, 16383, 1],
        [0, 15, -2097152, 0, 0, 0, 16383, 1],
        [0, 0, 2097088, 0, 0, 0, 16383, 1],
        [0, 0, 63, -8388608, 0, 0, 16383, 1],
        [0, 0, 0, 8388352, 0, 0, 16383, 1],
        [0, 0, 0, 255, -33554432, 0, 16383, 1],
        [0, 0, 0, 0, 33553408, 0, 16383, 1],
        [0, 0, 0, 0, 1023, -134217728, 16383, 1],
        [0, 0, 0, 0, 0, 134213632, 16383, 1],
        [0, 0, 0, 0, 0, 4095, -536854529, 1],
        [0, 0, 0, 0, 0, 0, 536870911, 1]
    ]
